name: Create Dev Prerelease

on:
  push:
    branches:
      - master

jobs:
  prerelease:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Generate Changelog
        id: changelog
        run: |
          # Fetch the previous 'dev-latest' tag
          previous_tag=$(git describe --tags --abbrev=0 --match "dev-latest" 2>/dev/null || echo "")
          
          # Determine the range for changelog
          if [ -n "$previous_tag" ]; then
            range="$previous_tag..HEAD"
          else
            range=""
          fi

          # Generate changelog from commit messages
          changelog=$(git log --pretty=format:"- %s (%h)" $range)
          
          # Output changelog for use in next steps
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$changelog" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Merge dot-prefixed folders into single XMLs
        run: |
          echo 'import os
import xml.etree.ElementTree as ET

base_path = "ModData/data"

for folder in os.listdir(base_path):
    folder_path = os.path.join(base_path, folder)
    if not os.path.isdir(folder_path):
        continue
    if not folder.startswith("."):
        continue

    prefix = folder[1:]  # remove the dot, e.g., ".objects" -> "objects"
    output_file = os.path.join(base_path, f"{prefix}.xml")
    root = ET.Element("Objects")

    for filename in sorted(os.listdir(folder_path)):
        if not filename.endswith(".xml"):
            continue
        if not filename.startswith(prefix + "-"):
            continue

        file_path = os.path.join(folder_path, filename)
        try:
            tree = ET.parse(file_path)
            for obj in tree.getroot():
                root.append(obj)
        except Exception as e:
            print(f"Error processing {file_path}: {e}")

    tree = ET.ElementTree(root)
    tree.write(output_file, encoding="utf-8", xml_declaration=True)
    print(f"Merged into {output_file}")
' > merge_dotfolders.py

          python3 merge_dotfolders.py

      - name: Create ZIP of ModData (excluding dot folders)
        run: |
          mkdir -p dist
          zip_name="SpiritOfFire-dev-latest.zip"
          zip -r "dist/$zip_name" ModData -x 'ModData/.*/*' -x 'ModData/.*'

      - name: Create or Update Dev Prerelease
        uses: softprops/action-gh-release@v1
        with:
          tag_name: dev-latest
          name: Development Build
          body: ${{ steps.changelog.outputs.changelog }}
          prerelease: true
          files: dist/SpiritOfFire-dev-latest.zip
          token: ${{ secrets.GITHUB_TOKEN }}
